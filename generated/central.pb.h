// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: central.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_central_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_central_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_central_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_central_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_central_2eproto;
namespace mapr {
class HandShakeReply;
class HandShakeReplyDefaultTypeInternal;
extern HandShakeReplyDefaultTypeInternal _HandShakeReply_default_instance_;
class HandShakeRequest;
class HandShakeRequestDefaultTypeInternal;
extern HandShakeRequestDefaultTypeInternal _HandShakeRequest_default_instance_;
class ShardData;
class ShardDataDefaultTypeInternal;
extern ShardDataDefaultTypeInternal _ShardData_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace mapr
PROTOBUF_NAMESPACE_OPEN
template<> ::mapr::HandShakeReply* Arena::CreateMaybeMessage<::mapr::HandShakeReply>(Arena*);
template<> ::mapr::HandShakeRequest* Arena::CreateMaybeMessage<::mapr::HandShakeRequest>(Arena*);
template<> ::mapr::ShardData* Arena::CreateMaybeMessage<::mapr::ShardData>(Arena*);
template<> ::mapr::Task* Arena::CreateMaybeMessage<::mapr::Task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mapr {

// ===================================================================

class HandShakeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.HandShakeRequest) */ {
 public:
  inline HandShakeRequest() : HandShakeRequest(nullptr) {}
  virtual ~HandShakeRequest();

  HandShakeRequest(const HandShakeRequest& from);
  HandShakeRequest(HandShakeRequest&& from) noexcept
    : HandShakeRequest() {
    *this = ::std::move(from);
  }

  inline HandShakeRequest& operator=(const HandShakeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandShakeRequest& operator=(HandShakeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandShakeRequest& default_instance();

  static inline const HandShakeRequest* internal_default_instance() {
    return reinterpret_cast<const HandShakeRequest*>(
               &_HandShakeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HandShakeRequest& a, HandShakeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HandShakeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandShakeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandShakeRequest* New() const final {
    return CreateMaybeMessage<HandShakeRequest>(nullptr);
  }

  HandShakeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandShakeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandShakeRequest& from);
  void MergeFrom(const HandShakeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandShakeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.HandShakeRequest";
  }
  protected:
  explicit HandShakeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:mapr.HandShakeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class HandShakeReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.HandShakeReply) */ {
 public:
  inline HandShakeReply() : HandShakeReply(nullptr) {}
  virtual ~HandShakeReply();

  HandShakeReply(const HandShakeReply& from);
  HandShakeReply(HandShakeReply&& from) noexcept
    : HandShakeReply() {
    *this = ::std::move(from);
  }

  inline HandShakeReply& operator=(const HandShakeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HandShakeReply& operator=(HandShakeReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HandShakeReply& default_instance();

  static inline const HandShakeReply* internal_default_instance() {
    return reinterpret_cast<const HandShakeReply*>(
               &_HandShakeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HandShakeReply& a, HandShakeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HandShakeReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HandShakeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HandShakeReply* New() const final {
    return CreateMaybeMessage<HandShakeReply>(nullptr);
  }

  HandShakeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HandShakeReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HandShakeReply& from);
  void MergeFrom(const HandShakeReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HandShakeReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.HandShakeReply";
  }
  protected:
  explicit HandShakeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:mapr.HandShakeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class ShardData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.ShardData) */ {
 public:
  inline ShardData() : ShardData(nullptr) {}
  virtual ~ShardData();

  ShardData(const ShardData& from);
  ShardData(ShardData&& from) noexcept
    : ShardData() {
    *this = ::std::move(from);
  }

  inline ShardData& operator=(const ShardData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShardData& operator=(ShardData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShardData& default_instance();

  static inline const ShardData* internal_default_instance() {
    return reinterpret_cast<const ShardData*>(
               &_ShardData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShardData& a, ShardData& b) {
    a.Swap(&b);
  }
  inline void Swap(ShardData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShardData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShardData* New() const final {
    return CreateMaybeMessage<ShardData>(nullptr);
  }

  ShardData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShardData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShardData& from);
  void MergeFrom(const ShardData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShardData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.ShardData";
  }
  protected:
  explicit ShardData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string fname = 1;
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mapr.ShardData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskidFieldNumber = 1,
    kTasktypeFieldNumber = 2,
    kMapshardFieldNumber = 3,
  };
  // string taskid = 1;
  void clear_taskid();
  const std::string& taskid() const;
  void set_taskid(const std::string& value);
  void set_taskid(std::string&& value);
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  std::string* mutable_taskid();
  std::string* release_taskid();
  void set_allocated_taskid(std::string* taskid);
  private:
  const std::string& _internal_taskid() const;
  void _internal_set_taskid(const std::string& value);
  std::string* _internal_mutable_taskid();
  public:

  // string tasktype = 2;
  void clear_tasktype();
  const std::string& tasktype() const;
  void set_tasktype(const std::string& value);
  void set_tasktype(std::string&& value);
  void set_tasktype(const char* value);
  void set_tasktype(const char* value, size_t size);
  std::string* mutable_tasktype();
  std::string* release_tasktype();
  void set_allocated_tasktype(std::string* tasktype);
  private:
  const std::string& _internal_tasktype() const;
  void _internal_set_tasktype(const std::string& value);
  std::string* _internal_mutable_tasktype();
  public:

  // .mapr.ShardData mapshard = 3;
  bool has_mapshard() const;
  private:
  bool _internal_has_mapshard() const;
  public:
  void clear_mapshard();
  const ::mapr::ShardData& mapshard() const;
  ::mapr::ShardData* release_mapshard();
  ::mapr::ShardData* mutable_mapshard();
  void set_allocated_mapshard(::mapr::ShardData* mapshard);
  private:
  const ::mapr::ShardData& _internal_mapshard() const;
  ::mapr::ShardData* _internal_mutable_mapshard();
  public:
  void unsafe_arena_set_allocated_mapshard(
      ::mapr::ShardData* mapshard);
  ::mapr::ShardData* unsafe_arena_release_mapshard();

  // @@protoc_insertion_point(class_scope:mapr.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr taskid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tasktype_;
  ::mapr::ShardData* mapshard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HandShakeRequest

// string message = 1;
inline void HandShakeRequest::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& HandShakeRequest::message() const {
  // @@protoc_insertion_point(field_get:mapr.HandShakeRequest.message)
  return _internal_message();
}
inline void HandShakeRequest::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:mapr.HandShakeRequest.message)
}
inline std::string* HandShakeRequest::mutable_message() {
  // @@protoc_insertion_point(field_mutable:mapr.HandShakeRequest.message)
  return _internal_mutable_message();
}
inline const std::string& HandShakeRequest::_internal_message() const {
  return message_.Get();
}
inline void HandShakeRequest::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HandShakeRequest::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.HandShakeRequest.message)
}
inline void HandShakeRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.HandShakeRequest.message)
}
inline void HandShakeRequest::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.HandShakeRequest.message)
}
inline std::string* HandShakeRequest::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HandShakeRequest::release_message() {
  // @@protoc_insertion_point(field_release:mapr.HandShakeRequest.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HandShakeRequest::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.HandShakeRequest.message)
}

// -------------------------------------------------------------------

// HandShakeReply

// string message = 1;
inline void HandShakeReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& HandShakeReply::message() const {
  // @@protoc_insertion_point(field_get:mapr.HandShakeReply.message)
  return _internal_message();
}
inline void HandShakeReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:mapr.HandShakeReply.message)
}
inline std::string* HandShakeReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:mapr.HandShakeReply.message)
  return _internal_mutable_message();
}
inline const std::string& HandShakeReply::_internal_message() const {
  return message_.Get();
}
inline void HandShakeReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HandShakeReply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.HandShakeReply.message)
}
inline void HandShakeReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.HandShakeReply.message)
}
inline void HandShakeReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.HandShakeReply.message)
}
inline std::string* HandShakeReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HandShakeReply::release_message() {
  // @@protoc_insertion_point(field_release:mapr.HandShakeReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HandShakeReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.HandShakeReply.message)
}

// -------------------------------------------------------------------

// ShardData

// string fname = 1;
inline void ShardData::clear_fname() {
  fname_.ClearToEmpty();
}
inline const std::string& ShardData::fname() const {
  // @@protoc_insertion_point(field_get:mapr.ShardData.fname)
  return _internal_fname();
}
inline void ShardData::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:mapr.ShardData.fname)
}
inline std::string* ShardData::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:mapr.ShardData.fname)
  return _internal_mutable_fname();
}
inline const std::string& ShardData::_internal_fname() const {
  return fname_.Get();
}
inline void ShardData::_internal_set_fname(const std::string& value) {
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShardData::set_fname(std::string&& value) {
  
  fname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.ShardData.fname)
}
inline void ShardData::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.ShardData.fname)
}
inline void ShardData::set_fname(const char* value,
    size_t size) {
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.ShardData.fname)
}
inline std::string* ShardData::_internal_mutable_fname() {
  
  return fname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShardData::release_fname() {
  // @@protoc_insertion_point(field_release:mapr.ShardData.fname)
  return fname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShardData::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    
  } else {
    
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.ShardData.fname)
}

// int32 start = 2;
inline void ShardData::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardData::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardData::start() const {
  // @@protoc_insertion_point(field_get:mapr.ShardData.start)
  return _internal_start();
}
inline void ShardData::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void ShardData::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:mapr.ShardData.start)
}

// int32 end = 3;
inline void ShardData::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardData::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ShardData::end() const {
  // @@protoc_insertion_point(field_get:mapr.ShardData.end)
  return _internal_end();
}
inline void ShardData::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void ShardData::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:mapr.ShardData.end)
}

// -------------------------------------------------------------------

// Task

// string taskid = 1;
inline void Task::clear_taskid() {
  taskid_.ClearToEmpty();
}
inline const std::string& Task::taskid() const {
  // @@protoc_insertion_point(field_get:mapr.Task.taskid)
  return _internal_taskid();
}
inline void Task::set_taskid(const std::string& value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:mapr.Task.taskid)
}
inline std::string* Task::mutable_taskid() {
  // @@protoc_insertion_point(field_mutable:mapr.Task.taskid)
  return _internal_mutable_taskid();
}
inline const std::string& Task::_internal_taskid() const {
  return taskid_.Get();
}
inline void Task::_internal_set_taskid(const std::string& value) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Task::set_taskid(std::string&& value) {
  
  taskid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.Task.taskid)
}
inline void Task::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.Task.taskid)
}
inline void Task::set_taskid(const char* value,
    size_t size) {
  
  taskid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.Task.taskid)
}
inline std::string* Task::_internal_mutable_taskid() {
  
  return taskid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Task::release_taskid() {
  // @@protoc_insertion_point(field_release:mapr.Task.taskid)
  return taskid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_taskid(std::string* taskid) {
  if (taskid != nullptr) {
    
  } else {
    
  }
  taskid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), taskid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.Task.taskid)
}

// string tasktype = 2;
inline void Task::clear_tasktype() {
  tasktype_.ClearToEmpty();
}
inline const std::string& Task::tasktype() const {
  // @@protoc_insertion_point(field_get:mapr.Task.tasktype)
  return _internal_tasktype();
}
inline void Task::set_tasktype(const std::string& value) {
  _internal_set_tasktype(value);
  // @@protoc_insertion_point(field_set:mapr.Task.tasktype)
}
inline std::string* Task::mutable_tasktype() {
  // @@protoc_insertion_point(field_mutable:mapr.Task.tasktype)
  return _internal_mutable_tasktype();
}
inline const std::string& Task::_internal_tasktype() const {
  return tasktype_.Get();
}
inline void Task::_internal_set_tasktype(const std::string& value) {
  
  tasktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Task::set_tasktype(std::string&& value) {
  
  tasktype_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.Task.tasktype)
}
inline void Task::set_tasktype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tasktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.Task.tasktype)
}
inline void Task::set_tasktype(const char* value,
    size_t size) {
  
  tasktype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.Task.tasktype)
}
inline std::string* Task::_internal_mutable_tasktype() {
  
  return tasktype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Task::release_tasktype() {
  // @@protoc_insertion_point(field_release:mapr.Task.tasktype)
  return tasktype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_tasktype(std::string* tasktype) {
  if (tasktype != nullptr) {
    
  } else {
    
  }
  tasktype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tasktype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.Task.tasktype)
}

// .mapr.ShardData mapshard = 3;
inline bool Task::_internal_has_mapshard() const {
  return this != internal_default_instance() && mapshard_ != nullptr;
}
inline bool Task::has_mapshard() const {
  return _internal_has_mapshard();
}
inline void Task::clear_mapshard() {
  if (GetArena() == nullptr && mapshard_ != nullptr) {
    delete mapshard_;
  }
  mapshard_ = nullptr;
}
inline const ::mapr::ShardData& Task::_internal_mapshard() const {
  const ::mapr::ShardData* p = mapshard_;
  return p != nullptr ? *p : reinterpret_cast<const ::mapr::ShardData&>(
      ::mapr::_ShardData_default_instance_);
}
inline const ::mapr::ShardData& Task::mapshard() const {
  // @@protoc_insertion_point(field_get:mapr.Task.mapshard)
  return _internal_mapshard();
}
inline void Task::unsafe_arena_set_allocated_mapshard(
    ::mapr::ShardData* mapshard) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mapshard_);
  }
  mapshard_ = mapshard;
  if (mapshard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mapr.Task.mapshard)
}
inline ::mapr::ShardData* Task::release_mapshard() {
  
  ::mapr::ShardData* temp = mapshard_;
  mapshard_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mapr::ShardData* Task::unsafe_arena_release_mapshard() {
  // @@protoc_insertion_point(field_release:mapr.Task.mapshard)
  
  ::mapr::ShardData* temp = mapshard_;
  mapshard_ = nullptr;
  return temp;
}
inline ::mapr::ShardData* Task::_internal_mutable_mapshard() {
  
  if (mapshard_ == nullptr) {
    auto* p = CreateMaybeMessage<::mapr::ShardData>(GetArena());
    mapshard_ = p;
  }
  return mapshard_;
}
inline ::mapr::ShardData* Task::mutable_mapshard() {
  // @@protoc_insertion_point(field_mutable:mapr.Task.mapshard)
  return _internal_mutable_mapshard();
}
inline void Task::set_allocated_mapshard(::mapr::ShardData* mapshard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mapshard_;
  }
  if (mapshard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mapshard);
    if (message_arena != submessage_arena) {
      mapshard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mapshard, submessage_arena);
    }
    
  } else {
    
  }
  mapshard_ = mapshard;
  // @@protoc_insertion_point(field_set_allocated:mapr.Task.mapshard)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_central_2eproto
