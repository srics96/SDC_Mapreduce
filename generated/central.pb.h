// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: central.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_central_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_central_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_central_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_central_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_central_2eproto;
namespace mapr {
class FileInfo;
class FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
class ResultFile;
class ResultFileDefaultTypeInternal;
extern ResultFileDefaultTypeInternal _ResultFile_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskCompletion;
class TaskCompletionDefaultTypeInternal;
extern TaskCompletionDefaultTypeInternal _TaskCompletion_default_instance_;
class TaskCompletionAck;
class TaskCompletionAckDefaultTypeInternal;
extern TaskCompletionAckDefaultTypeInternal _TaskCompletionAck_default_instance_;
class TaskReception;
class TaskReceptionDefaultTypeInternal;
extern TaskReceptionDefaultTypeInternal _TaskReception_default_instance_;
}  // namespace mapr
PROTOBUF_NAMESPACE_OPEN
template<> ::mapr::FileInfo* Arena::CreateMaybeMessage<::mapr::FileInfo>(Arena*);
template<> ::mapr::ResultFile* Arena::CreateMaybeMessage<::mapr::ResultFile>(Arena*);
template<> ::mapr::Task* Arena::CreateMaybeMessage<::mapr::Task>(Arena*);
template<> ::mapr::TaskCompletion* Arena::CreateMaybeMessage<::mapr::TaskCompletion>(Arena*);
template<> ::mapr::TaskCompletionAck* Arena::CreateMaybeMessage<::mapr::TaskCompletionAck>(Arena*);
template<> ::mapr::TaskReception* Arena::CreateMaybeMessage<::mapr::TaskReception>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mapr {

// ===================================================================

class TaskReception PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.TaskReception) */ {
 public:
  inline TaskReception() : TaskReception(nullptr) {}
  virtual ~TaskReception();

  TaskReception(const TaskReception& from);
  TaskReception(TaskReception&& from) noexcept
    : TaskReception() {
    *this = ::std::move(from);
  }

  inline TaskReception& operator=(const TaskReception& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskReception& operator=(TaskReception&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskReception& default_instance();

  static inline const TaskReception* internal_default_instance() {
    return reinterpret_cast<const TaskReception*>(
               &_TaskReception_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskReception& a, TaskReception& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskReception* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskReception* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskReception* New() const final {
    return CreateMaybeMessage<TaskReception>(nullptr);
  }

  TaskReception* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskReception>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskReception& from);
  void MergeFrom(const TaskReception& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskReception* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.TaskReception";
  }
  protected:
  explicit TaskReception(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:mapr.TaskReception)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class TaskCompletionAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.TaskCompletionAck) */ {
 public:
  inline TaskCompletionAck() : TaskCompletionAck(nullptr) {}
  virtual ~TaskCompletionAck();

  TaskCompletionAck(const TaskCompletionAck& from);
  TaskCompletionAck(TaskCompletionAck&& from) noexcept
    : TaskCompletionAck() {
    *this = ::std::move(from);
  }

  inline TaskCompletionAck& operator=(const TaskCompletionAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCompletionAck& operator=(TaskCompletionAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskCompletionAck& default_instance();

  static inline const TaskCompletionAck* internal_default_instance() {
    return reinterpret_cast<const TaskCompletionAck*>(
               &_TaskCompletionAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskCompletionAck& a, TaskCompletionAck& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCompletionAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCompletionAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskCompletionAck* New() const final {
    return CreateMaybeMessage<TaskCompletionAck>(nullptr);
  }

  TaskCompletionAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskCompletionAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskCompletionAck& from);
  void MergeFrom(const TaskCompletionAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCompletionAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.TaskCompletionAck";
  }
  protected:
  explicit TaskCompletionAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:mapr.TaskCompletionAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class ResultFile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.ResultFile) */ {
 public:
  inline ResultFile() : ResultFile(nullptr) {}
  virtual ~ResultFile();

  ResultFile(const ResultFile& from);
  ResultFile(ResultFile&& from) noexcept
    : ResultFile() {
    *this = ::std::move(from);
  }

  inline ResultFile& operator=(const ResultFile& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultFile& operator=(ResultFile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultFile& default_instance();

  static inline const ResultFile* internal_default_instance() {
    return reinterpret_cast<const ResultFile*>(
               &_ResultFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultFile& a, ResultFile& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultFile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultFile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultFile* New() const final {
    return CreateMaybeMessage<ResultFile>(nullptr);
  }

  ResultFile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultFile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultFile& from);
  void MergeFrom(const ResultFile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultFile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.ResultFile";
  }
  protected:
  explicit ResultFile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // string fileName = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // @@protoc_insertion_point(class_scope:mapr.ResultFile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class TaskCompletion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.TaskCompletion) */ {
 public:
  inline TaskCompletion() : TaskCompletion(nullptr) {}
  virtual ~TaskCompletion();

  TaskCompletion(const TaskCompletion& from);
  TaskCompletion(TaskCompletion&& from) noexcept
    : TaskCompletion() {
    *this = ::std::move(from);
  }

  inline TaskCompletion& operator=(const TaskCompletion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskCompletion& operator=(TaskCompletion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskCompletion& default_instance();

  static inline const TaskCompletion* internal_default_instance() {
    return reinterpret_cast<const TaskCompletion*>(
               &_TaskCompletion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskCompletion& a, TaskCompletion& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskCompletion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskCompletion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskCompletion* New() const final {
    return CreateMaybeMessage<TaskCompletion>(nullptr);
  }

  TaskCompletion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskCompletion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskCompletion& from);
  void MergeFrom(const TaskCompletion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskCompletion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.TaskCompletion";
  }
  protected:
  explicit TaskCompletion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFilesFieldNumber = 3,
    kTaskIdFieldNumber = 1,
    kWorkerIdFieldNumber = 2,
  };
  // repeated .mapr.ResultFile result_files = 3;
  int result_files_size() const;
  private:
  int _internal_result_files_size() const;
  public:
  void clear_result_files();
  ::mapr::ResultFile* mutable_result_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >*
      mutable_result_files();
  private:
  const ::mapr::ResultFile& _internal_result_files(int index) const;
  ::mapr::ResultFile* _internal_add_result_files();
  public:
  const ::mapr::ResultFile& result_files(int index) const;
  ::mapr::ResultFile* add_result_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >&
      result_files() const;

  // int32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 worker_id = 2;
  void clear_worker_id();
  ::PROTOBUF_NAMESPACE_ID::int32 worker_id() const;
  void set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_worker_id() const;
  void _internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mapr.TaskCompletion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile > result_files_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class FileInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  virtual ~FileInfo();

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FileInfo& default_instance();

  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return CreateMaybeMessage<FileInfo>(nullptr);
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFnameFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
  };
  // string fname = 1;
  void clear_fname();
  const std::string& fname() const;
  void set_fname(const std::string& value);
  void set_fname(std::string&& value);
  void set_fname(const char* value);
  void set_fname(const char* value, size_t size);
  std::string* mutable_fname();
  std::string* release_fname();
  void set_allocated_fname(std::string* fname);
  private:
  const std::string& _internal_fname() const;
  void _internal_set_fname(const std::string& value);
  std::string* _internal_mutable_fname();
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mapr.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fname_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mapr.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mapr.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_central_2eproto);
    return ::descriptor_table_central_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 5,
    kOutputFilesFieldNumber = 9,
    kTaskTypeFieldNumber = 4,
    kStatusFieldNumber = 8,
    kMasterUrlFieldNumber = 10,
    kTaskIdFieldNumber = 1,
    kWorkerIdFieldNumber = 2,
    kNumReducersFieldNumber = 3,
    kReducerIdFieldNumber = 6,
    kJobIdFieldNumber = 7,
  };
  // repeated .mapr.FileInfo files = 5;
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::mapr::FileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::FileInfo >*
      mutable_files();
  private:
  const ::mapr::FileInfo& _internal_files(int index) const;
  ::mapr::FileInfo* _internal_add_files();
  public:
  const ::mapr::FileInfo& files(int index) const;
  ::mapr::FileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::FileInfo >&
      files() const;

  // repeated .mapr.ResultFile output_files = 9;
  int output_files_size() const;
  private:
  int _internal_output_files_size() const;
  public:
  void clear_output_files();
  ::mapr::ResultFile* mutable_output_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >*
      mutable_output_files();
  private:
  const ::mapr::ResultFile& _internal_output_files(int index) const;
  ::mapr::ResultFile* _internal_add_output_files();
  public:
  const ::mapr::ResultFile& output_files(int index) const;
  ::mapr::ResultFile* add_output_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >&
      output_files() const;

  // string task_type = 4;
  void clear_task_type();
  const std::string& task_type() const;
  void set_task_type(const std::string& value);
  void set_task_type(std::string&& value);
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  std::string* mutable_task_type();
  std::string* release_task_type();
  void set_allocated_task_type(std::string* task_type);
  private:
  const std::string& _internal_task_type() const;
  void _internal_set_task_type(const std::string& value);
  std::string* _internal_mutable_task_type();
  public:

  // string status = 8;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string master_url = 10;
  void clear_master_url();
  const std::string& master_url() const;
  void set_master_url(const std::string& value);
  void set_master_url(std::string&& value);
  void set_master_url(const char* value);
  void set_master_url(const char* value, size_t size);
  std::string* mutable_master_url();
  std::string* release_master_url();
  void set_allocated_master_url(std::string* master_url);
  private:
  const std::string& _internal_master_url() const;
  void _internal_set_master_url(const std::string& value);
  std::string* _internal_mutable_master_url();
  public:

  // int32 task_id = 1;
  void clear_task_id();
  ::PROTOBUF_NAMESPACE_ID::int32 task_id() const;
  void set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_task_id() const;
  void _internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 worker_id = 2;
  void clear_worker_id();
  ::PROTOBUF_NAMESPACE_ID::int32 worker_id() const;
  void set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_worker_id() const;
  void _internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 num_reducers = 3;
  void clear_num_reducers();
  ::PROTOBUF_NAMESPACE_ID::int32 num_reducers() const;
  void set_num_reducers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_reducers() const;
  void _internal_set_num_reducers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reducer_id = 6;
  void clear_reducer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 reducer_id() const;
  void set_reducer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reducer_id() const;
  void _internal_set_reducer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 job_id = 7;
  void clear_job_id();
  ::PROTOBUF_NAMESPACE_ID::int32 job_id() const;
  void set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_job_id() const;
  void _internal_set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mapr.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::FileInfo > files_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile > output_files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 task_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 worker_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_reducers_;
  ::PROTOBUF_NAMESPACE_ID::int32 reducer_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 job_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_central_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskReception

// string message = 1;
inline void TaskReception::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TaskReception::message() const {
  // @@protoc_insertion_point(field_get:mapr.TaskReception.message)
  return _internal_message();
}
inline void TaskReception::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:mapr.TaskReception.message)
}
inline std::string* TaskReception::mutable_message() {
  // @@protoc_insertion_point(field_mutable:mapr.TaskReception.message)
  return _internal_mutable_message();
}
inline const std::string& TaskReception::_internal_message() const {
  return message_.Get();
}
inline void TaskReception::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskReception::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.TaskReception.message)
}
inline void TaskReception::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.TaskReception.message)
}
inline void TaskReception::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.TaskReception.message)
}
inline std::string* TaskReception::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskReception::release_message() {
  // @@protoc_insertion_point(field_release:mapr.TaskReception.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskReception::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.TaskReception.message)
}

// -------------------------------------------------------------------

// TaskCompletionAck

// string message = 1;
inline void TaskCompletionAck::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TaskCompletionAck::message() const {
  // @@protoc_insertion_point(field_get:mapr.TaskCompletionAck.message)
  return _internal_message();
}
inline void TaskCompletionAck::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:mapr.TaskCompletionAck.message)
}
inline std::string* TaskCompletionAck::mutable_message() {
  // @@protoc_insertion_point(field_mutable:mapr.TaskCompletionAck.message)
  return _internal_mutable_message();
}
inline const std::string& TaskCompletionAck::_internal_message() const {
  return message_.Get();
}
inline void TaskCompletionAck::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TaskCompletionAck::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.TaskCompletionAck.message)
}
inline void TaskCompletionAck::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.TaskCompletionAck.message)
}
inline void TaskCompletionAck::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.TaskCompletionAck.message)
}
inline std::string* TaskCompletionAck::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TaskCompletionAck::release_message() {
  // @@protoc_insertion_point(field_release:mapr.TaskCompletionAck.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskCompletionAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.TaskCompletionAck.message)
}

// -------------------------------------------------------------------

// ResultFile

// string fileName = 1;
inline void ResultFile::clear_filename() {
  filename_.ClearToEmpty();
}
inline const std::string& ResultFile::filename() const {
  // @@protoc_insertion_point(field_get:mapr.ResultFile.fileName)
  return _internal_filename();
}
inline void ResultFile::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:mapr.ResultFile.fileName)
}
inline std::string* ResultFile::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:mapr.ResultFile.fileName)
  return _internal_mutable_filename();
}
inline const std::string& ResultFile::_internal_filename() const {
  return filename_.Get();
}
inline void ResultFile::_internal_set_filename(const std::string& value) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResultFile::set_filename(std::string&& value) {
  
  filename_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.ResultFile.fileName)
}
inline void ResultFile::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.ResultFile.fileName)
}
inline void ResultFile::set_filename(const char* value,
    size_t size) {
  
  filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.ResultFile.fileName)
}
inline std::string* ResultFile::_internal_mutable_filename() {
  
  return filename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResultFile::release_filename() {
  // @@protoc_insertion_point(field_release:mapr.ResultFile.fileName)
  return filename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResultFile::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.ResultFile.fileName)
}

// -------------------------------------------------------------------

// TaskCompletion

// int32 task_id = 1;
inline void TaskCompletion::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskCompletion::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskCompletion::task_id() const {
  // @@protoc_insertion_point(field_get:mapr.TaskCompletion.task_id)
  return _internal_task_id();
}
inline void TaskCompletion::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
}
inline void TaskCompletion::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:mapr.TaskCompletion.task_id)
}

// int32 worker_id = 2;
inline void TaskCompletion::clear_worker_id() {
  worker_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskCompletion::_internal_worker_id() const {
  return worker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskCompletion::worker_id() const {
  // @@protoc_insertion_point(field_get:mapr.TaskCompletion.worker_id)
  return _internal_worker_id();
}
inline void TaskCompletion::_internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  worker_id_ = value;
}
inline void TaskCompletion::set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:mapr.TaskCompletion.worker_id)
}

// repeated .mapr.ResultFile result_files = 3;
inline int TaskCompletion::_internal_result_files_size() const {
  return result_files_.size();
}
inline int TaskCompletion::result_files_size() const {
  return _internal_result_files_size();
}
inline void TaskCompletion::clear_result_files() {
  result_files_.Clear();
}
inline ::mapr::ResultFile* TaskCompletion::mutable_result_files(int index) {
  // @@protoc_insertion_point(field_mutable:mapr.TaskCompletion.result_files)
  return result_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >*
TaskCompletion::mutable_result_files() {
  // @@protoc_insertion_point(field_mutable_list:mapr.TaskCompletion.result_files)
  return &result_files_;
}
inline const ::mapr::ResultFile& TaskCompletion::_internal_result_files(int index) const {
  return result_files_.Get(index);
}
inline const ::mapr::ResultFile& TaskCompletion::result_files(int index) const {
  // @@protoc_insertion_point(field_get:mapr.TaskCompletion.result_files)
  return _internal_result_files(index);
}
inline ::mapr::ResultFile* TaskCompletion::_internal_add_result_files() {
  return result_files_.Add();
}
inline ::mapr::ResultFile* TaskCompletion::add_result_files() {
  // @@protoc_insertion_point(field_add:mapr.TaskCompletion.result_files)
  return _internal_add_result_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >&
TaskCompletion::result_files() const {
  // @@protoc_insertion_point(field_list:mapr.TaskCompletion.result_files)
  return result_files_;
}

// -------------------------------------------------------------------

// FileInfo

// string fname = 1;
inline void FileInfo::clear_fname() {
  fname_.ClearToEmpty();
}
inline const std::string& FileInfo::fname() const {
  // @@protoc_insertion_point(field_get:mapr.FileInfo.fname)
  return _internal_fname();
}
inline void FileInfo::set_fname(const std::string& value) {
  _internal_set_fname(value);
  // @@protoc_insertion_point(field_set:mapr.FileInfo.fname)
}
inline std::string* FileInfo::mutable_fname() {
  // @@protoc_insertion_point(field_mutable:mapr.FileInfo.fname)
  return _internal_mutable_fname();
}
inline const std::string& FileInfo::_internal_fname() const {
  return fname_.Get();
}
inline void FileInfo::_internal_set_fname(const std::string& value) {
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void FileInfo::set_fname(std::string&& value) {
  
  fname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.FileInfo.fname)
}
inline void FileInfo::set_fname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.FileInfo.fname)
}
inline void FileInfo::set_fname(const char* value,
    size_t size) {
  
  fname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.FileInfo.fname)
}
inline std::string* FileInfo::_internal_mutable_fname() {
  
  return fname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* FileInfo::release_fname() {
  // @@protoc_insertion_point(field_release:mapr.FileInfo.fname)
  return fname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FileInfo::set_allocated_fname(std::string* fname) {
  if (fname != nullptr) {
    
  } else {
    
  }
  fname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.FileInfo.fname)
}

// int32 start = 2;
inline void FileInfo::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::start() const {
  // @@protoc_insertion_point(field_get:mapr.FileInfo.start)
  return _internal_start();
}
inline void FileInfo::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void FileInfo::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:mapr.FileInfo.start)
}

// int32 end = 3;
inline void FileInfo::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FileInfo::end() const {
  // @@protoc_insertion_point(field_get:mapr.FileInfo.end)
  return _internal_end();
}
inline void FileInfo::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void FileInfo::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:mapr.FileInfo.end)
}

// -------------------------------------------------------------------

// Task

// int32 task_id = 1;
inline void Task::clear_task_id() {
  task_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_task_id() const {
  return task_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::task_id() const {
  // @@protoc_insertion_point(field_get:mapr.Task.task_id)
  return _internal_task_id();
}
inline void Task::_internal_set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  task_id_ = value;
}
inline void Task::set_task_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:mapr.Task.task_id)
}

// int32 worker_id = 2;
inline void Task::clear_worker_id() {
  worker_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_worker_id() const {
  return worker_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::worker_id() const {
  // @@protoc_insertion_point(field_get:mapr.Task.worker_id)
  return _internal_worker_id();
}
inline void Task::_internal_set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  worker_id_ = value;
}
inline void Task::set_worker_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:mapr.Task.worker_id)
}

// int32 num_reducers = 3;
inline void Task::clear_num_reducers() {
  num_reducers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_num_reducers() const {
  return num_reducers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::num_reducers() const {
  // @@protoc_insertion_point(field_get:mapr.Task.num_reducers)
  return _internal_num_reducers();
}
inline void Task::_internal_set_num_reducers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_reducers_ = value;
}
inline void Task::set_num_reducers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_reducers(value);
  // @@protoc_insertion_point(field_set:mapr.Task.num_reducers)
}

// string task_type = 4;
inline void Task::clear_task_type() {
  task_type_.ClearToEmpty();
}
inline const std::string& Task::task_type() const {
  // @@protoc_insertion_point(field_get:mapr.Task.task_type)
  return _internal_task_type();
}
inline void Task::set_task_type(const std::string& value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:mapr.Task.task_type)
}
inline std::string* Task::mutable_task_type() {
  // @@protoc_insertion_point(field_mutable:mapr.Task.task_type)
  return _internal_mutable_task_type();
}
inline const std::string& Task::_internal_task_type() const {
  return task_type_.Get();
}
inline void Task::_internal_set_task_type(const std::string& value) {
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Task::set_task_type(std::string&& value) {
  
  task_type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.Task.task_type)
}
inline void Task::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.Task.task_type)
}
inline void Task::set_task_type(const char* value,
    size_t size) {
  
  task_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.Task.task_type)
}
inline std::string* Task::_internal_mutable_task_type() {
  
  return task_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Task::release_task_type() {
  // @@protoc_insertion_point(field_release:mapr.Task.task_type)
  return task_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_task_type(std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.Task.task_type)
}

// repeated .mapr.FileInfo files = 5;
inline int Task::_internal_files_size() const {
  return files_.size();
}
inline int Task::files_size() const {
  return _internal_files_size();
}
inline void Task::clear_files() {
  files_.Clear();
}
inline ::mapr::FileInfo* Task::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:mapr.Task.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::FileInfo >*
Task::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:mapr.Task.files)
  return &files_;
}
inline const ::mapr::FileInfo& Task::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::mapr::FileInfo& Task::files(int index) const {
  // @@protoc_insertion_point(field_get:mapr.Task.files)
  return _internal_files(index);
}
inline ::mapr::FileInfo* Task::_internal_add_files() {
  return files_.Add();
}
inline ::mapr::FileInfo* Task::add_files() {
  // @@protoc_insertion_point(field_add:mapr.Task.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::FileInfo >&
Task::files() const {
  // @@protoc_insertion_point(field_list:mapr.Task.files)
  return files_;
}

// int32 reducer_id = 6;
inline void Task::clear_reducer_id() {
  reducer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_reducer_id() const {
  return reducer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::reducer_id() const {
  // @@protoc_insertion_point(field_get:mapr.Task.reducer_id)
  return _internal_reducer_id();
}
inline void Task::_internal_set_reducer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reducer_id_ = value;
}
inline void Task::set_reducer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reducer_id(value);
  // @@protoc_insertion_point(field_set:mapr.Task.reducer_id)
}

// int32 job_id = 7;
inline void Task::clear_job_id() {
  job_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::_internal_job_id() const {
  return job_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Task::job_id() const {
  // @@protoc_insertion_point(field_get:mapr.Task.job_id)
  return _internal_job_id();
}
inline void Task::_internal_set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  job_id_ = value;
}
inline void Task::set_job_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:mapr.Task.job_id)
}

// string status = 8;
inline void Task::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Task::status() const {
  // @@protoc_insertion_point(field_get:mapr.Task.status)
  return _internal_status();
}
inline void Task::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:mapr.Task.status)
}
inline std::string* Task::mutable_status() {
  // @@protoc_insertion_point(field_mutable:mapr.Task.status)
  return _internal_mutable_status();
}
inline const std::string& Task::_internal_status() const {
  return status_.Get();
}
inline void Task::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Task::set_status(std::string&& value) {
  
  status_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.Task.status)
}
inline void Task::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.Task.status)
}
inline void Task::set_status(const char* value,
    size_t size) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.Task.status)
}
inline std::string* Task::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Task::release_status() {
  // @@protoc_insertion_point(field_release:mapr.Task.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.Task.status)
}

// repeated .mapr.ResultFile output_files = 9;
inline int Task::_internal_output_files_size() const {
  return output_files_.size();
}
inline int Task::output_files_size() const {
  return _internal_output_files_size();
}
inline void Task::clear_output_files() {
  output_files_.Clear();
}
inline ::mapr::ResultFile* Task::mutable_output_files(int index) {
  // @@protoc_insertion_point(field_mutable:mapr.Task.output_files)
  return output_files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >*
Task::mutable_output_files() {
  // @@protoc_insertion_point(field_mutable_list:mapr.Task.output_files)
  return &output_files_;
}
inline const ::mapr::ResultFile& Task::_internal_output_files(int index) const {
  return output_files_.Get(index);
}
inline const ::mapr::ResultFile& Task::output_files(int index) const {
  // @@protoc_insertion_point(field_get:mapr.Task.output_files)
  return _internal_output_files(index);
}
inline ::mapr::ResultFile* Task::_internal_add_output_files() {
  return output_files_.Add();
}
inline ::mapr::ResultFile* Task::add_output_files() {
  // @@protoc_insertion_point(field_add:mapr.Task.output_files)
  return _internal_add_output_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mapr::ResultFile >&
Task::output_files() const {
  // @@protoc_insertion_point(field_list:mapr.Task.output_files)
  return output_files_;
}

// string master_url = 10;
inline void Task::clear_master_url() {
  master_url_.ClearToEmpty();
}
inline const std::string& Task::master_url() const {
  // @@protoc_insertion_point(field_get:mapr.Task.master_url)
  return _internal_master_url();
}
inline void Task::set_master_url(const std::string& value) {
  _internal_set_master_url(value);
  // @@protoc_insertion_point(field_set:mapr.Task.master_url)
}
inline std::string* Task::mutable_master_url() {
  // @@protoc_insertion_point(field_mutable:mapr.Task.master_url)
  return _internal_mutable_master_url();
}
inline const std::string& Task::_internal_master_url() const {
  return master_url_.Get();
}
inline void Task::_internal_set_master_url(const std::string& value) {
  
  master_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Task::set_master_url(std::string&& value) {
  
  master_url_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mapr.Task.master_url)
}
inline void Task::set_master_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  master_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mapr.Task.master_url)
}
inline void Task::set_master_url(const char* value,
    size_t size) {
  
  master_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mapr.Task.master_url)
}
inline std::string* Task::_internal_mutable_master_url() {
  
  return master_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Task::release_master_url() {
  // @@protoc_insertion_point(field_release:mapr.Task.master_url)
  return master_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_master_url(std::string* master_url) {
  if (master_url != nullptr) {
    
  } else {
    
  }
  master_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mapr.Task.master_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mapr

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_central_2eproto
